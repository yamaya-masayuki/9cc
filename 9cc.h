#include "vector.h"
#include "map.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

// MIN„Éû„ÇØ„É≠
#define MIN(a, b) ((a) < (b) ? (a) : (b))

// Âûã
typedef struct Type {
    enum TypeKind { INT, PTR, ARRAY } type; // Âûã„ÅÆÁ®ÆÂà•
    struct Type *ptr_to;    // type„ÅåPTR„ÅÆÊôÇ„Å†„ÅëÊúâÂäπ
    int num_elements;       // ÈÖçÂàó„ÅÆË¶ÅÁ¥†Êï∞
} Type;

static inline const char* type_description(Type *type) {
    static const char* description[] = {
        "INT", "PTR", "ARRAY"
    };
    static char buffer[1024];

    if (!type) {
        return "null.";
    }

    sprintf(buffer, "%-5s %-14p %d",
            description[type->type],
            type->ptr_to,
            type->num_elements);
    return buffer;
}

static inline bool type_equal(Type *lhs, Type *rhs) {
    if (lhs == rhs) return true;
    if (!(lhs && rhs)) return false;
    return lhs->type == rhs->type &&
           lhs->num_elements == rhs->num_elements &&
           type_equal(lhs->ptr_to, rhs->ptr_to);
}

/**
 * „Éù„Ç§„É≥„Çø„ÅÆÊï∞„ÇíËøî„Åô
 *
 * \param type_info ÂûãÊÉÖÂ†±
 * \return „Éù„Ç§„É≥„Çø„ÅÆÊï∞„ÄÇ„ÉÄ„Éñ„É´„Éù„Ç§„É≥„Çø„Å™„Çâ2„ÄÇ
 */
static inline int type_number_of_pointers(const Type *type_info) {
    int n = 0;
    if (type_info && type_info->type == PTR) {
        for (Type *t = type_info->ptr_to; t; t = t->ptr_to) {
            n++;
        }
    }
    return n;
}

/**
 * Âûã„ÅÆ„Éê„Ç§„Éà„Çµ„Ç§„Ç∫„ÇíÂæó„Çã
 *
 * \param type_info ÂûãÊÉÖÂ†±
 * \return „Éê„Ç§„Éà„Çµ„Ç§„Ç∫
 */
static inline int type_byte_size(const Type *type_info) {
    switch (type_info->type) {
    case INT:
        return 4;
    case PTR:
        return 8;
    case ARRAY:
        return 4 * type_info->num_elements; // INT„Åó„Åã„Å™„ÅÑ„ÅÆ„Åß4
    }
    assert(false); // „Åì„Åì„Å´„ÅØÊù•„Å™„ÅÑ„ÅØ„Åö
    return 0;
}

/**
 * Âûã„Åå„Éù„Ç§„É≥„Çø„Åæ„Åü„ÅØÈÖçÂàó„Åã„Å©„ÅÜ„Åã
 *
 * \param type_info ÂûãÊÉÖÂ†±
 * \return „Éù„Ç§„É≥„Çø„Åæ„Åü„ÅØÈÖçÂàó„Å™„ÇâÁúü
 */
static inline bool type_is_pointer_or_array(const Type* type_info) {
    assert(type_info);
    return type_info->type == PTR || type_info->type == ARRAY;
}

static inline Type* new_type(enum TypeKind tk) {
    Type* type = calloc(1, sizeof(Type));
    type->type = tk;
    return type;
}

static inline Type* new_ptr_type(Type* original_type) {
    Type* type = calloc(1, sizeof(Type));
    type->type = PTR;
    type->ptr_to = original_type;
    return type;
}

static inline Type* new_array_type(int n, Type* original_type) {
    Type* type = calloc(1, sizeof(Type));
    type->type = ARRAY;
    type->ptr_to = original_type;
    type->num_elements = n;
    return type;
}

// ÊäΩË±°ÊßãÊñáÊú®„ÅÆ„Éé„Éº„Éâ„ÅÆÁ®ÆÈ°û
typedef enum {
    ND_ADD, // +
    ND_SUB, // -
    ND_MUL, // *
    ND_DIV, // /
    ND_GREATER, // >
    ND_GREATER_EQUAL, // >=
    ND_EQUAL, // ==
    ND_NOT_EQUAL, // !=
    ND_ASSIGN,  // =
    ND_RETURN, // return
    ND_IF, // if
    ND_ELSE, // else
    ND_WHILE, // while
    ND_FOR, // for
    ND_LVAR,    // „É≠„Éº„Ç´„É´Â§âÊï∞
    ND_GLOBAL_DEF,  // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ÂÆ£Ë®Ä
    ND_GLOBAL_REF,  // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ÂèÇÁÖß
    ND_BLOCK,    // „Éñ„É≠„ÉÉ„ÇØ
    ND_FUN, // Èñ¢Êï∞
    ND_FUN_IMPL, // Èñ¢Êï∞ÂÆöÁæ©
    ND_NUM, // Êï¥Êï∞
    ND_ADDR, // „Ç¢„Éâ„É¨„ÇπÂèñÂæóÊºîÁÆóÂ≠ê
    ND_DEREF, // „Ç¢„Éâ„É¨„ÇπÂèÇÁÖßÊºîÁÆóÂ≠ê
} NodeKind;

static inline const char* node_kind_descripion(NodeKind kind) {
    static const char* description[] = {
        "ADD", // +
        "SUB", // -
        "MUL", // *
        "DIV", // /
        "GREATER", // >
        "GREATER_EQUAL", // >=
        "EQUAL", // ==
        "NOT_EQUAL", // !=
        "ASSIGN",  // =
        "RETURN", // return
        "IF", // if
        "ELSE", // else
        "WHILE", // while
        "FOR", // for
        "LVAR",    // „É≠„Éº„Ç´„É´Â§âÊï∞
        "GLOBAL_DEF",   // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
        "GLOBAL_REF",   // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
        "BLOCK",    // „Éñ„É≠„ÉÉ„ÇØ
        "FUN", // Èñ¢Êï∞
        "FUN_IMPL", // Èñ¢Êï∞ÂÆöÁæ©
        "NUM", // Êï¥Êï∞
        "ADDR", // „Ç¢„Éâ„É¨„ÇπÂèñÂæóÊºîÁÆóÂ≠ê
        "DEREF", // „Ç¢„Éâ„É¨„ÇπÂèÇÁÖßÊºîÁÆóÂ≠ê
    };
    return description[kind];
}

typedef struct Node {
    NodeKind kind;      // Á®ÆÂà•
    struct Node *lhs;   // Â∑¶Ëæ∫
    struct Node *rhs;   // Âè≥Ëæ∫
    struct Node *condition; // Êù°‰ª∂(if„ÅÆÂ†¥Âêà„ÅÆ„Åø)
    Vector *block;      // „Éñ„É≠„ÉÉ„ÇØ
    int val;            // kind„ÅåND_NUM„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆÂÄ§„ÄÅkind„ÅåND_FUN„ÅÆÂ†¥Âêà„ÄÅÈñ¢Êï∞Âëº„Å≥Âá∫„ÅóÁ¢∫ÂÆöÊ∏à„Åã„Å©„ÅÜ„Åã„ÇíÁ§∫„Åô„Éï„É©„Ç∞ÂÄ§
    char *ident;        // kind„ÅåND_FUN„ÅÆÂ†¥Âêà„ÅÆ„Åø‰Ωø„ÅÜ(Èñ¢Êï∞Âêç)
    int identLength;    // ‰∏äË®ò„ÅÆÈï∑„Åï   
    int offset;         // kind„ÅåND_LVAR„ÅÆÂ†¥Âêà„ÅÆ„Åø‰Ωø„ÅÜ
    Type *type;         // ÂûãÊÉÖÂ†±
} Node;

static inline const char* node_name_copy(const Node* node, char* buffer, int size) {
    buffer[0] = '\0';
    const int n = MIN(size - 1, node->identLength);
    memcpy(buffer, node->ident, n);
    buffer[n] = '\0';
    return buffer;
}

static inline const char* node_name(const Node* node) {
    static char buffer[1024];

    node_name_copy(node, buffer, sizeof(buffer));
    return buffer;
}

static inline const char* node_description(Node *node) {
    static char buffer[1024];
    static char tmp[1024];

    if (!node) {
        return "(nil)";
    }

    tmp[0] = '\0';
    if (node->kind == ND_FUN || node->kind == ND_FUN_IMPL || node->kind == ND_LVAR) {
        node_name_copy(node, tmp, sizeof(tmp));
    } else if (node->kind == ND_NUM) {
        const int n = sprintf(tmp, "num:%d", node->val);
        tmp[n] = '\0';
    }

    sprintf(buffer, "%-12s '%-6s' {%-s} %3d %14p/%14p/%14p",
            node_kind_descripion(node->kind),
            tmp,
            type_description(node->type),
            node->offset,
            node->lhs,
            node->rhs,
            node->condition);
    return buffer;
}

static inline int node_num_pointers(Node *node) {
    if (node->kind == ND_LVAR) {
        return type_number_of_pointers(node->type);
    }
    return 0;
}

// „Éù„Ç§„É≥„Çø„Å®„Åó„Å¶Êâ±„ÅÜ„Åã„Å©„ÅÜ„Åã
static inline bool node_is_treat_pointer(Node *node) {
    if (node->kind == ND_LVAR) {
        return type_is_pointer_or_array(node->type);
    }
    return false;
}

static inline bool node_hands_is_treat_pointer(Node *node) {
    return node_is_treat_pointer(node->lhs) || node_is_treat_pointer(node->rhs);
}

static inline bool node_is_pointer_variable_many(Node *node) {
    return node_num_pointers(node) > 1;
}

static inline bool node_hands_is_pointer_variable_many(Node *node) {
    return node_is_pointer_variable_many(node->lhs) || node_is_pointer_variable_many(node->rhs);
}

// „Éà„Éº„ÇØ„É≥„ÅÆÁ®ÆÈ°û
typedef enum {
    TK_RESERVED,    // Ë®òÂè∑
    TK_IDENT,       // Ë≠òÂà•Â≠ê
    TK_RETURN,      // returnÊñá
    TK_IF,          // ifÊñá
    TK_ELSE,        // elseÊñá
    TK_WHILE,       // whileÊñá
    TK_FOR,         // forÊñá
    TK_NUM,         // Êï¥Êï∞„Éà„Éº„ÇØ„É≥
    TK_INT,         // "int"„Å®Ë®Ä„ÅÜÂêçÂâç„ÅÆÂûã
    TK_SIZEOF,      // sizeof
    TK_EOF,         // ÂÖ•Âäõ„ÅÆÁµÇ„Çè„Çä„ÇíË°®„Åô„Éà„Éº„ÇØ„É≥
} TokenKind;

static inline const char *token_kind_description(TokenKind kind) {
    switch (kind) {
    case TK_RESERVED:    // Ë®òÂè∑
        return "RESERVED";
    case TK_IDENT:       // Ë≠òÂà•Â≠ê
        return "IDENT";
    case TK_RETURN:      // returnÊñá
        return "RETURN";
    case TK_IF:          // ifÊñá
        return "IF";
    case TK_ELSE:        // elseÊñá
        return "ELSE";
    case TK_WHILE:       // whileÊñá
        return "WHILE";
    case TK_FOR:         // forÊñá
        return "FOR";
    case TK_NUM:         // Êï¥Êï∞„Éà„Éº„ÇØ„É≥
        return "NUM";
    case TK_INT:         // "int"„Å®Ë®Ä„ÅÜÂêçÂâç„ÅÆÂûã
        return "INT";
    case TK_SIZEOF:
        return "SIZEOF";
    case TK_EOF:         // ÂÖ•Âäõ„ÅÆÁµÇ„Çè„Çä„ÇíË°®„Åô„Éà„Éº„ÇØ„É≥
        return "EOF";
    }
    return "*Unrecoginzed*";
}

// „Éà„Éº„ÇØ„É≥„ÅÆÂûã
typedef struct Token {
    TokenKind kind;     // „Éà„Éº„ÇØ„É≥Á®ÆÂà•
    struct Token *next; // Ê¨°„ÅÆ„Éà„Éº„ÇØ„É≥
    int val;            // ty„ÅåTK_NUM„ÅÆÂ†¥Âêà„ÄÅ„Åù„ÅÆÊï∞ÂÄ§
    char *str;          // „Éà„Éº„ÇØ„É≥ÊñáÂ≠óÂàó
    int len;            // „Éà„Éº„ÇØ„É≥ÊñáÂ≠óÂàó„ÅÆÈï∑„Åï
    char *input;        // „Éà„Éº„ÇØ„É≥ÊñáÂ≠óÂàóÔºà„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Áî®Ôºâ
} Token;

static inline const char *token_description(Token *token) {
    static char buffer[1024];
    static char tmp[1024];

    if (!token) {
        return "null";
    }

    const int n = MIN(sizeof(tmp) - 1, token->len);
    memcpy(tmp, token->str, n);
    tmp[n] = '\0';
    
    sprintf(buffer, "Token: %s, `%s` %p",
            token_kind_description(token->kind),
            tmp,
            token->next);
    return buffer;
}

static inline char *token_name_copy(Token *token) {
    char *name = NULL;
    if (token) {
        // Â§âÊï∞Âêç„ÇíÁ¢∫‰øù„Åô„Çã
        name = calloc(1, token->len + 1);
        memcpy(name, token->str, token->len);
    }
    return name;
}

typedef enum {
    GEN_PUSHED_RESULT,
    GEN_DONT_PUSHED_RESULT,
} GenResult;

extern Token *token;

extern Token *tokenize(char *p);
extern void error_exit(char *fmt, ...);
extern void program();
extern void gen_global_varibale(const Node *node);
extern GenResult gen(Node *node);
extern Node *code[];

#define D(fmt, ...) \
    fprintf(stderr, ("üêù %s[%s#%d] " fmt "\n"), __PRETTY_FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)

#define D_INT(v) \
    do { D(#v "=%d", (v)); fflush(stderr); } while (0)

#define D_NODE(n) \
    do { D(#n "=%s", node_description(n)); fflush(stderr); } while (0)

#define D_TOKEN(t) \
    do { D(#t "=%s", token_description(t)); fflush(stderr); } while (0)

#define D_TYPE(t) \
    do { D(#t "=%s", type_description(t)); fflush(stderr); } while (0)
